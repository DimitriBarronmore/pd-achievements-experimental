
--[[
	==prototype achievements library==
	This is an initial prototype implementation in order to help effect a standard.
	This prototype will have no strong error checks and be small in scope. Any
	  wider-scope implementation of the standard will be separate.

	== planned usage ==

	Import the library using `import "achievements"
	The library has now created a global variable named "achievements".
	I hate this approach, but it's a prototype and this is how the playdate
	  does things because y'all are crazy.

	The user now needs to configure the library. Make a config table as so:

		local achievementData = {
			-- Technically, any string. We need to spell it out explicitly
			--   instead of using metadata.bundleID so that it won't get 
			--   mangled by online sideloading. Plus, this way multi-pdx
			--   games or demos can share achievements.
			gameID = "com.example.yourgame",
			-- These are optional, and will be auto-filled with metadata
			--   values if not specified here. This is also for multi-pdx
			--   games.
			name = "My Awesome Game",
			author = "You, Inc",
			description = "The next (r)evolution in cranking technology.",
			-- And finally, a table of achievements.
			achievements = {
				{
					id = "test_achievement",
					name = "Achievement Name",
					description = "Achievement Description",
					is_secret = false,
					icon = "filepath" -- to be iterated on
					[more to be determined]
				},
			}
		}

	This table makes up the top-level data structure being saved to the shared
	json file. The gameID field determines the name of the folder it will
	be written to, rather than bundleID, to keep things consistent.

	The only thing that is truly required is the gameID field, because this is
	  necessary for identification. Everything else can be left blank, and it
	  will be auto-filled or simply absent in the case of achievement data.

	The user passes the config table to the library like so:
		achievements.initialize(achievementData, preventdebug)
	This function finishes populating the configuration table with metadata
	  if necessary, merges the achievement data with the saved list of granted
	  achievements, creates the shared folder and .json file with the new data,
	  and iterates over the achievement data in order to copy images given to
	  the shared folder.
	If `preventdebug` evaluates true, initialization debugging messages will not
	  be printed to the console.

	In order to grant an achievement to the player, run `achievements.grant(id)`
	  If this is a valid achievement id, it will key the id to the current epoch
	  second in the achievement save data.
	In order to revoke an achievement, run `achievements.revoke(id)`
	  If this is a valid achievement id, it will remove the id from the save
	  data keys.
	
	To save achievement data, run `achievements.save()`. This will save granted
	  achievements to disk and save the game data to the shared json file. Run this
	  function alongside other game-save functions when the game exits. Of course,
	  unfortunately, achievements don't respect save slots.

	==details==
	The achievements file in the game's save directory is the prime authority on active achievements.
	It contains nothing more than a map of achievement IDs which have been earned by the player to when they were earned.
	This should make it extremely easy to manage, and prevents other games from directly messing with achievement data.
	The achievement files in the /Shared/Achievements/bundleID folder are regenerated at game load and when saving.
	They are to be generated by serializing `module.achievements` along with `module.localData` and copying any images (when we get to those).
--]]

-- TODO?: Maybe make importing these 'extra' graphics optional
import "CoreLibs/graphics"

-- Right, we're gonna make this easier to change in the future.
-- Another note: changing the data directory to `/Shared/gameID`
--   rather than the previously penciled in `/Shared/Achievements/gameID`
local default_shared_achievement_folder <const> = "/Shared/"
local default_achievement_file_name <const> = "Achievements.json"

local function get_achievement_folder_root_path(gameID)
	if type(gameID) ~= "string" then
		error("bad argument #1: expected string, got " .. type(gameID), 2)
	end
	local root = string.format(default_shared_achievement_folder .. "%s/", gameID)
	return root
end
local function get_achievement_data_file_path(gameID)
	if type(gameID) ~= "string" then
		error("bad argument #1: expected string, got " .. type(gameID), 2)
	end
	local root = get_achievement_folder_root_path(gameID)
	return root .. default_achievement_file_name
end

local metadata <const> = playdate.metadata

---@diagnostic disable-next-line: lowercase-global
achievements = {
	specversion = "0.1+prototype",
	libversion = "0.2-alpha+spec_proposal",
}

local function load_granted_data(from_file)
	if from_file == nil then
		from_file = "./" .. default_achievement_file_name
	end
	local data = json.decodeFile(from_file)
	if not data then
		data = {}
	end
	achievements.granted = data
end

local function export_data()
	local data = achievements.gameData
	json.encodeToFile(get_achievement_data_file_path(data.gameID), true, data)
end
function achievements.save(to_file)
	if to_file == nil then
		to_file = "./" .. default_achievement_file_name
	end
	export_data()
	json.encodeToFile(to_file, false, achievements.granted)
end

local function copy_images_to_shared()
end

local function donothing(...) end
function achievements.initialize(gamedata, prevent_debug)
	local print = (prevent_debug and donothing) or print
	print("------")
	print("Initializing achievements...")
	if gamedata.achievements == nil then
		print("WARNING: no achievements configured")
		gamedata.achievements = {}
	elseif type(gamedata.achievements) ~= "table" then
		error("achievements must be a table", 2)
	end
	if gamedata.gameID == nil then
		gamedata.gameID = string.gsub(metadata.bundleID, "^user%.%d+%.", "")
		print('gameID not configured: defaulting to "' .. gamedata.gameID .. '"')
	elseif type(gamedata.gameID) ~= "string" then
		error("gameID must be a string", 2)
	end
	for _, field in ipairs{"name", "author", "version", "description"} do
		if gamedata[field] == nil then
			if playdate.metadata[field] ~= nill then
				gamedata[field] = playdate.metadata[field]
				print(field .. ' not configured: defaulting to "' .. gamedata[field] .. '"')
			else
				print("WARNING: " .. field .. " not configured AND not present in pxinfo metadata")
			end
		elseif type(gamedata[field]) ~= "string" then
			error(field .. " must be a string", 2)
		end
	end
	gamedata.version = metadata.version
	gamedata.specversion = achievements.specversion
	gamedata.libversion = achievements.libversion
	print("game version saved as \"" .. gamedata.version .. "\"")
	print("library version saved as \"" .. gamedata.libversion .. "\"")
	achievements.gameData = gamedata

	load_granted_data()

	achievements.keyedAchievements = {}
	for _, ach in ipairs(gamedata.achievements) do
		if achievements.keyedAchievements[ach.id] then
			error("achievement id '" .. ach.id .. "' defined multiple times", 2)
		end
		achievements.keyedAchievements[ach.id] = ach
		ach.granted_at = achievements.granted[ach.id] or false
	end

	playdate.file.mkdir(get_achievement_folder_root_path(gamedata.gameID))
	export_data()
	copy_images_to_shared()

	print("files exported to /Shared")
	print("Achievements have been initialized!")
	print("------")
end


--[[ Achievement Management Functions ]]--

achievements.getInfo = function(achievement_id)
	return achievements.keyedAchievements[achievement_id] or false
end

achievements.displayGrantedMilliseconds = 2000
achievements.displayGrantedDefaultX = 20
achievements.displayGrantedDefaultY = 0
achievements.onUnconfigured = error

-- don't waste time checking if we know we'll supply the right arguments anyway (for in-library usage)
local function drawCardUnsafe(ach, x, y)
	-- TODO: pre-make achievement 'badge' to speed up processing, that way we don't mess up the existing colors either, since we can lock the image context
	--       that _does_ mean badges will need to be updated separately (eventually) when we revoke/'add-progress-to' the things
	-- TODO: get our own font in here, so we don't use the font users have set outside of the lib
	-- TODO: properly draw this, have someone with better art-experience look at it
	local gfx <const> = playdate.graphics
	gfx.fillRoundRect(x, y, 360, 40, 3)
	gfx.setColor(gfx.kColorWhite)
	gfx.drawRoundRect(x, y, 360, 40, 3, 2)
	gfx.fillRect(x + 4, y + 4, 32, 32)  -- placeholder for image or animation
	gfx.fillRect(x + 324, y + 4, 32, 32)  -- placeholder for image or animation
	gfx.drawTextInRect(ach.name, x + 40, y + 14, 292, 60, nil, "...", kTextAlignment.center)
	gfx.setColor(gfx.kColorBlack)
end

achievements.drawCard = function (achievement_id, x, y)
	local ach = achievements.keyedAchievements[achievement_id]
	if not ach then
		achievements.onUnconfigured("attempt to draw unconfigured achievement '" .. achievement_id .. "'", 2)
		return
	end
	if x == nil or y == nil then
		x = achievements.displayGrantedDefaultX
		y = achievements.displayGrantedDefaultY
	end
	drawCardUnsafe(ach, x, y)
end

local function animateGrantedUnsafe(ach, x, y, msec_since_granted, draw_card_func)
	draw_card_func(
		ach,
		x + 7 * math.sin(msec_since_granted/90.0),
		y + (msec_since_granted/10.0)
	)
	return msec_since_granted <= achievements.displayGrantedMilliseconds
end

achievements.animateGranted = function(achievement_id, x, y, msec_since_granted, draw_card_func)
	local ach = achievements.keyedAchievements[achievement_id]
	if not ach then
		achievements.onUnconfigured("attempt to draw unconfigured achievement '" .. achievement_id .. "'", 2)
		return
	end
	if x == nil or y == nil then
		x = achievements.displayGrantedDefaultX
		y = achievements.displayGrantedDefaultY
	end
	if msec_since_granted == nil then
		-- for now, the animation will take an equal time in as out, so 'half-time' is a good position to draw unspecified
		msec_since_granted = achievements.displayGrantedMilliseconds / 2
	end
	if draw_card_func == nil then
		draw_card_func = drawCardUnsafe
	end
	return animateGrantedUnsafe(ach, x, y, msec_since_granted, draw_card_func)
end

local draw_coros = {}
achievements.grant = function(achievement_id, silent, draw_card_func, animate_func)
	local ach = achievements.keyedAchievements[achievement_id]
	if not ach then
		achievements.onUnconfigured("attempt to grant unconfigured achievement '" .. achievement_id .. "'", 2)
		return
	end
	-- TODO: check if alreayd granted!
	-- playdate documentation states that getSecondsSinceEpoch should be a list of (seconds, milliseconds), but only the seconds are given...
	local time = playdate.getSecondsSinceEpoch()
	achievements.granted[achievement_id] = ( time )
	ach.granted_at = time

	-- drawing, if needed
	if silent then
		return
	end
	if draw_card_func == nil then
		draw_card_func = drawCardUnsafe
	end
	if animate_func == nil then
		animate_func = animateGrantedUnsafe
	end
	-- tie display-coroutine to achievement-id, so that the system doesn't get confused by rapid grant/revoke
	draw_coros[achievement_id] = coroutine.create(
		function ()
			-- NOTE: use getCurrentTimeMilliseconds here (regardless of time granted), since that'll take into account game-pausing.
			local start_msec = playdate.getCurrentTimeMilliseconds()
			local current_msec = start_msec
			while animate_func(
				ach,
				achievements.displayGrantedDefaultX,
				achievements.displayGrantedDefaultY,
				current_msec - start_msec,
				draw_card_func
			) do
				coroutine.yield()
				current_msec = playdate.getCurrentTimeMilliseconds()
			end
		end
	)
	-- TODO: what if multiple acievements at the same time?
end

achievements.revoke = function(achievement_id)
	local ach = achievements.keyedAchievements[achievement_id]
	if not ach then
		achievements.onUnconfigured("attempt to revoke unconfigured achievement '" .. achievement_id .. "'", 2)
		return
	end
	ach.granted_at = false
	achievements.granted[achievement_id] = nil
end

achievements.visualUpdate = function ()
    for achievement_id, coro_func in pairs(draw_coros) do
        if not coroutine.resume(coro_func) then
			draw_coros[achievement_id] = nil
		end
    end
end

--[[ External Game Functions ]]--

achievements.gamePlayed = function(game_id)
	return playdate.file.isdir(get_achievement_folder_root_path(game_id))
end

achievements.gameData = function(game_id)
	if not achievements.gamePlayed(game_id) then
		error("No game with ID '" .. game_id .. "' was found", 2)
	end
	local data = json.decodeFile(get_achievement_data_file_path(game_id))
	local keys = {}
	for _, ach in ipairs(data.achievements) do
		keys[ach.id] = ach
	end
	data.keyedAchievements = keys
	return data
end


return achievements